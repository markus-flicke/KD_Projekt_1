// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// vecnorm
double vecnorm(NumericVector x);
RcppExport SEXP _GraphAlgorithms_vecnorm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vecnorm(x));
    return rcpp_result_gen;
END_RCPP
}
// vektorzugriff
NumericVector vektorzugriff(NumericMatrix xy, int i);
RcppExport SEXP _GraphAlgorithms_vektorzugriff(SEXP xySEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(vektorzugriff(xy, i));
    return rcpp_result_gen;
END_RCPP
}
// vergl
IntegerVector vergl(NumericVector x, NumericVector y);
RcppExport SEXP _GraphAlgorithms_vergl(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vergl(x, y));
    return rcpp_result_gen;
END_RCPP
}
// toVec
NumericVector toVec(NumericVector x, int i);
RcppExport SEXP _GraphAlgorithms_toVec(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(toVec(x, i));
    return rcpp_result_gen;
END_RCPP
}
// isNA
LogicalVector isNA(IntegerVector x);
RcppExport SEXP _GraphAlgorithms_isNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP
}
// excl
NumericVector excl(NumericMatrix xy, NumericVector vertices, NumericVector excluded, int i);
RcppExport SEXP _GraphAlgorithms_excl(SEXP xySEXP, SEXP verticesSEXP, SEXP excludedSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type excluded(excludedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(excl(xy, vertices, excluded, i));
    return rcpp_result_gen;
END_RCPP
}
// Gab
NumericMatrix Gab(NumericMatrix Gabriel, NumericVector edges1, NumericVector edges2);
RcppExport SEXP _GraphAlgorithms_Gab(SEXP GabrielSEXP, SEXP edges1SEXP, SEXP edges2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Gabriel(GabrielSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type edges1(edges1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type edges2(edges2SEXP);
    rcpp_result_gen = Rcpp::wrap(Gab(Gabriel, edges1, edges2));
    return rcpp_result_gen;
END_RCPP
}
// filterIndexVector
NumericVector filterIndexVector(NumericVector indexVector, NumericVector excluded);
RcppExport SEXP _GraphAlgorithms_filterIndexVector(SEXP indexVectorSEXP, SEXP excludedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type indexVector(indexVectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type excluded(excludedSEXP);
    rcpp_result_gen = Rcpp::wrap(filterIndexVector(indexVector, excluded));
    return rcpp_result_gen;
END_RCPP
}
// getAdjList
List getAdjList(int npts, NumericMatrix UniqXY);
RcppExport SEXP _GraphAlgorithms_getAdjList(SEXP nptsSEXP, SEXP UniqXYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type npts(nptsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type UniqXY(UniqXYSEXP);
    rcpp_result_gen = Rcpp::wrap(getAdjList(npts, UniqXY));
    return rcpp_result_gen;
END_RCPP
}
// fastPdist2
NumericMatrix fastPdist2(NumericMatrix Ar, NumericMatrix Br);
RcppExport SEXP _GraphAlgorithms_fastPdist2(SEXP ArSEXP, SEXP BrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Ar(ArSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Br(BrSEXP);
    rcpp_result_gen = Rcpp::wrap(fastPdist2(Ar, Br));
    return rcpp_result_gen;
END_RCPP
}
// BrokenGabrielEdgesX
LogicalMatrix BrokenGabrielEdgesX(NumericMatrix x, IntegerMatrix edges);
RcppExport SEXP _GraphAlgorithms_BrokenGabrielEdgesX(SEXP xSEXP, SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(BrokenGabrielEdgesX(x, edges));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GraphAlgorithms_vecnorm", (DL_FUNC) &_GraphAlgorithms_vecnorm, 1},
    {"_GraphAlgorithms_vektorzugriff", (DL_FUNC) &_GraphAlgorithms_vektorzugriff, 2},
    {"_GraphAlgorithms_vergl", (DL_FUNC) &_GraphAlgorithms_vergl, 2},
    {"_GraphAlgorithms_toVec", (DL_FUNC) &_GraphAlgorithms_toVec, 2},
    {"_GraphAlgorithms_isNA", (DL_FUNC) &_GraphAlgorithms_isNA, 1},
    {"_GraphAlgorithms_excl", (DL_FUNC) &_GraphAlgorithms_excl, 4},
    {"_GraphAlgorithms_Gab", (DL_FUNC) &_GraphAlgorithms_Gab, 3},
    {"_GraphAlgorithms_filterIndexVector", (DL_FUNC) &_GraphAlgorithms_filterIndexVector, 2},
    {"_GraphAlgorithms_getAdjList", (DL_FUNC) &_GraphAlgorithms_getAdjList, 2},
    {"_GraphAlgorithms_fastPdist2", (DL_FUNC) &_GraphAlgorithms_fastPdist2, 2},
    {"_GraphAlgorithms_BrokenGabrielEdgesX", (DL_FUNC) &_GraphAlgorithms_BrokenGabrielEdgesX, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_GraphAlgorithms(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
